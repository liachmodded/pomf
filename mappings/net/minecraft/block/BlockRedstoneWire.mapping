CLASS atd net/minecraft/block/BlockRedstoneWire
	CLASS atd$a ConnectionType
		FIELD a UP Latd$a;
		FIELD b SIDE Latd$a;
		FIELD c NONE Latd$a;
		FIELD d name Ljava/lang/String;
		METHOD m asString ()Ljava/lang/String;
	FIELD a NORTH Laxf;
	FIELD b EAST Laxf;
	FIELD c SOUTH Laxf;
	FIELD d WEST Laxf;
	FIELD e POWER Laxg;
	FIELD f BOXES [Lbgz;
	FIELD g wiresGivePower Z
	METHOD a deserializeState (I)Lawr;
		ARG 0 meta
	METHOD a canPlaceAt (Lams;Let;)Z
		ARG 0 world
		ARG 1 pos
	METHOD a getPickStack (Lams;Let;Lawr;)Lain;
		ARG 0 world
		ARG 1 pos
		ARG 2 state
	METHOD a getBlockFaceShape (Lamw;Lawr;Let;Lfa;)Lawp;
		ARG 0 blockView
		ARG 1 state
		ARG 2 pos
		ARG 3 face
	METHOD a getRenderConnectionType (Lamw;Let;Lfa;)Latd$a;
		ARG 0 view
		ARG 1 pos
		ARG 2 facing
	METHOD a update (Lawr;Lams;Let;Laou;Let;)V
		ARG 0 state
		ARG 1 world
		ARG 2 pos
		ARG 3 block
		ARG 4 updatePos
	METHOD a randomDisplayTick (Lawr;Lams;Let;Ljava/util/Random;)V
		ARG 0 state
		ARG 1 world
		ARG 2 pos
		ARG 3 rand
	METHOD a getCollisionBox (Lawr;Lamw;Let;)Lbgz;
		ARG 0 state
		ARG 1 view
		ARG 2 pos
	METHOD a applyMirror (Lawr;Larw;)Lawr;
		ARG 0 state
		ARG 1 mirror
	METHOD a applyRotation (Lawr;Latk;)Lawr;
		ARG 0 state
		ARG 1 rotation
	METHOD a getDropItem (Lawr;Ljava/util/Random;I)Lail;
		ARG 0 state
		ARG 1 random
		ARG 2 fortune
	METHOD b createStateFactory ()Laws;
	METHOD b getWireColor (I)I
		ARG 0 powerLevel
	METHOD b onBlockRemoved (Lams;Let;Lawr;)V
		ARG 0 world
		ARG 1 pos
		ARG 2 state
	METHOD b isFullBoundsCubeForCulling (Lawr;)Z
		ARG 0 state
	METHOD b getBoundingBox (Lawr;Lamw;Let;)Lbgz;
		ARG 0 state
		ARG 1 view
		ARG 2 pos
	METHOD b getWeakRedstonePower (Lawr;Lamw;Let;Lfa;)I
		ARG 0 state
		ARG 1 view
		ARG 2 pos
		ARG 3 facingFrom
	METHOD c onBlockAdded (Lams;Let;Lawr;)V
		ARG 0 world
		ARG 1 pos
		ARG 2 state
	METHOD c isFullBoundsCubeForConnection (Lawr;)Z
		ARG 0 state
	METHOD c getStrongRedstonePower (Lawr;Lamw;Let;Lfa;)I
		ARG 0 state
		ARG 1 view
		ARG 2 pos
		ARG 3 facingFrom
	METHOD d getRenderingState (Lawr;Lamw;Let;)Lawr;
		ARG 0 state
		ARG 1 view
		ARG 2 pos
	METHOD e serializeState (Lawr;)I
		ARG 0 state
	METHOD f getRenderLayer ()Lamk;
	METHOD g emitsRedstonePower (Lawr;)Z
		ARG 0 state
