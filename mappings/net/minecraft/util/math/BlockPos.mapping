CLASS eq net/minecraft/util/math/BlockPos
	CLASS eq$1
		METHOD a computeNext ()Leq;
	CLASS eq$2
		METHOD a computeNext ()Leq$a;
	CLASS eq$a Mutable
		FIELD b mutableX I
		FIELD c mutableY I
		FIELD d mutableZ I
		METHOD a add (DDD)Leq;
		METHOD a set (Lafh;)Leq$a;
		METHOD a offset (Lev;I)Leq;
		METHOD b add (III)Leq;
		METHOD c set (DDD)Leq$a;
		METHOD c setOffset (Lev;)Leq$a;
		METHOD c setOffset (Lev;I)Leq$a;
		METHOD d set (III)Leq$a;
		METHOD d crossProduct (Lfk;)Lfk;
		METHOD g set (Lfk;)Leq$a;
		METHOD h toImmutable ()Leq;
		METHOD o getX ()I
		METHOD p getY ()I
		METHOD p setY (I)V
		METHOD q getZ ()I
	CLASS eq$b PooledMutable
		FIELD f usable Z
		FIELD g POOL Ljava/util/List;
		METHOD a set (Lafh;)Leq$a;
		METHOD c set (DDD)Leq$a;
		METHOD c set (Lafh;)Leq$b;
		METHOD c setOffset (Lev;)Leq$a;
		METHOD c setOffset (Lev;I)Leq$a;
		METHOD d get (DDD)Leq$b;
		METHOD d set (III)Leq$a;
		METHOD d setOffset (Lev;)Leq$b;
		METHOD d setOffset (Lev;I)Leq$b;
		METHOD e set (DDD)Leq$b;
		METHOD f get (III)Leq$b;
		METHOD g set (III)Leq$b;
		METHOD g set (Lfk;)Leq$a;
		METHOD j set (Lfk;)Leq$b;
		METHOD r get ()Leq$b;
	FIELD a ORIGIN Leq;
	FIELD b LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD g X_PACK_MASK J
	FIELD h Y_PACK_MASK J
	FIELD i Z_PACK_MASK J
	FIELD j Z_PACK_SHIFT I
	FIELD k X_PACK_SHIFT I
	METHOD a pack ()J
	METHOD a add (DDD)Leq;
	METHOD a pack (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
		ARG 3 packed
	METHOD a iterateBoxPositions (IIIIII)Ljava/lang/Iterable;
	METHOD a iterateBoxPositions (Leq;Leq;)Ljava/lang/Iterable;
	METHOD a offset (Lev;)Leq;
	METHOD a offset (Lev;I)Leq;
	METHOD a add (Lfk;)Leq;
	METHOD b up ()Leq;
	METHOD b up (I)Leq;
	METHOD b add (III)Leq;
	METHOD b iterateBoxPositionsMutable (IIIIII)Ljava/lang/Iterable;
	METHOD b isPackedInvalid (J)Z
	METHOD b iterateBoxPositionsMutable (Leq;Leq;)Ljava/lang/Iterable;
	METHOD b subtract (Lfk;)Leq;
	METHOD c down ()Leq;
	METHOD c down (I)Leq;
	METHOD c unpackX (J)I
		ARG 0 packed
	METHOD c crossProduct (Lfk;)Leq;
	METHOD d north ()Leq;
	METHOD d north (I)Leq;
	METHOD d unpackY (J)I
		ARG 0 packed
	METHOD d crossProduct (Lfk;)Lfk;
	METHOD e south ()Leq;
	METHOD e south (I)Leq;
	METHOD e unpackZ (J)I
		ARG 0 packed
	METHOD f west ()Leq;
	METHOD f west (I)Leq;
	METHOD f unpack (J)Leq;
	METHOD g east ()Leq;
	METHOD g east (I)Leq;
	METHOD h toImmutable ()Leq;
